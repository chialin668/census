class CnsController < ApplicationController

  def initialize
    @app_name='CNS'
    @title='iFS Google Map'
    @tagline='iFanSee.com'
    @theme='aqualicious'
    @current_year=current_year

    # generated by gmap_boundary (below)
    @gpoint2scale={}
    @gpoint2scale[0] = [179.660598015651, 360]
    @gpoint2scale[1] = [170.096706553637, 360]
    @gpoint2scale[2] = [128.483045527522, -124.453125]
    @gpoint2scale[3] = [73.9031654426447, -242.2265625]
    @gpoint2scale[4] = [38.0651294889721, 58.88671875]
    @gpoint2scale[5] = [19.1529343885006, 29.443359375]
    @gpoint2scale[6] = [9.59068639035872, 14.7216796875]
    @gpoint2scale[7] = [4.79709256107169, 7.36083984374999]
    @gpoint2scale[8] = [2.39876405744805, 3.68041992187499]
    @gpoint2scale[9] = [1.19937427144405, 1.8402099609375]
    @gpoint2scale[10] = [0.599690533042605, 0.92010498046875]
    @gpoint2scale[11] = [0.299845691158907, 0.460052490234361]
    @gpoint2scale[12] = [0.149923444820949, 0.230026245117159]
    @gpoint2scale[13] = [0.0749617290455404, 0.115013122558594]
    @gpoint2scale[14] = [0.037480865352201, 0.0575065612792969]
    @gpoint2scale[15] = [0.0187404242459763, 0.02875328063962]
    @gpoint2scale[16] = [0.00937021426939566, 0.0143766403197958]
    @gpoint2scale[17] = [0.00468510713633208, 0.00718832015991211]    
  end

  def gmap_boundary
    #
    # To retrieve information, use: 
    # http://localhost:3000/gmap_geobound.html
    #
    boundary=[]
    boundary[0] = [[-89.72647879678343, -180], [89.93411921886802, 180]]
    boundary[1] = [[-82.02137801950886, -180], [88.07532853412853, 180]]
    boundary[2] = [[-48.92249926375824, 120.23437499999997], [79.56054626376365, -4.21875]]
    boundary[3] = [[-7.885147283424331, 178.9453125], [66.01801815922042, -63.28125]]
    boundary[4] = [[16.04581345375217, -151.611328125], [54.1109429427243, -92.724609375]]
    boundary[5] = [[27.254629577800063, -136.845703125], [46.40756396630067, -107.40234375]]
    boundary[6] = [[32.491230287947594, -129.5068359375], [42.08191667830631, -114.78515625000001]]
    boundary[7] = [[35.00300339527669, -125.826416015625], [39.80009595634838, -118.46557617187501]]
    boundary[8] = [[36.230981283477924, -123.98071289062499], [38.62974534092597, -120.30029296874999]]
    boundary[9] = [[36.84006462037767, -123.06335449218751], [38.039438891821725, -121.22314453125001]]
    boundary[10] = [[37.14170874010794, -122.6019287109375], [37.74139927315054, -121.68182373046875]]
    boundary[11] = [[37.292081740702365, -122.37190246582031], [37.59192743186127, -121.91184997558595]]
    boundary[12] = [[37.366882922327626, -122.2568893432617], [37.516806367148575, -122.02686309814455]]
    boundary[13] = [[37.404391941703665, -122.19938278198242], [37.479353670749205, -122.08436965942383]]
    boundary[14] = [[37.42313941392658, -122.17062950134277], [37.46062027927878, -122.11312294006348]]
    boundary[15] = [[37.43254546808027, -122.15629577636717], [37.45128589232625, -122.12754249572755]]
    boundary[16] = [[37.437213976341035, -122.14908599853514], [37.44658419061043, -122.13470935821535]]
    boundary[17] = [[37.43955663991349, -122.1454918384552], [37.444241747049816, -122.13830351829529]]
    
    # Google map has 17 levels
    0.upto(17) do |i|
      (nw, se) = boundary[i]
      (nw_lat, nw_lng) = nw
      (se_lat, se_ng) = se
      
      puts "@gpoint2scale[#{i}] = [#{se_lat-Nw_lat}, #{se_ng-Nw_lng}]"
    end
  end

  def get_parameters
    @html_type = params[:html_type]
    @cds=params[:cds]

    #
    # save to session for rjs  
    # will be cleared by _sidebar.rhtml (when reloaded)
    #
    session[:county_name] = params[:county_name] if params[:county_name]
    session[:district_name] = params[:district_name] if params[:district_name]

    @stype_changed = true if session[:stype] != params[:stype]

    session[:stype] = params[:stype] if params[:stype]
    session[:mtype] = 'district' if params[:district]=='checked'  # google marker type
    session[:mtype] = 'school' if params[:school]=='checked'  # google marker type
    session[:mtype] = 'county' if params[:county]=='checked'      # google marker type
    session[:mtype] = 'state' if params[:state]=='checked'        # google marker type
    
    @county_name = session[:county_name] 
    @district_name = session[:district_name] 
    @stype = session[:stype]
    @mtype = session[:mtype]
  end



##############################################################################################

  def load_markers
    # blank markers
    @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDRedIcons/blank.png",                                       
                                      :icon_size => GSize.new(20,34),
                                      :icon_anchor => GPoint.new(12,34),
                                      :shadow => "/images/icons/google/shadow50.png",
                                      :shadow_size => GSize.new(37,34),
                                      :info_window_anchor => GPoint.new(9,2)), 
                                      "icon_blank_red")    

    @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDGreenIcons/blank.png",                                       
                                      :icon_size => GSize.new(20,34),
                                      :icon_anchor => GPoint.new(12,34),
                                      :shadow => "/images/icons/google/shadow50.png",
                                      :shadow_size => GSize.new(37,34),
                                      :info_window_anchor => GPoint.new(9,2)), 
                                      "icon_blank_green")    

    @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDBlueIcons/blank.png",                                       
                                      :icon_size => GSize.new(20,34),
                                      :icon_anchor => GPoint.new(12,34),
                                      :shadow => "/images/icons/google/shadow50.png",
                                      :shadow_size => GSize.new(37,34),
                                      :info_window_anchor => GPoint.new(9,2)), 
                                      "icon_blank_blue")    

    @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDYellowIcons/blank.png",                                       
                                      :icon_size => GSize.new(20,34),
                                      :icon_anchor => GPoint.new(12,34),
                                      :shadow => "/images/icons/google/shadow50.png",
                                      :shadow_size => GSize.new(37,34),
                                      :info_window_anchor => GPoint.new(9,2)), 
                                      "icon_blank_yellow")    

    @map.icon_global_init(GIcon.new(:image => "/images/icons/0-99/blank.png",                                       
                                      :icon_size => GSize.new(20,34),
                                      :icon_anchor => GPoint.new(12,34),
                                      :shadow => "/images/icons/google/shadow50.png",
                                      :shadow_size => GSize.new(37,34),
                                      :info_window_anchor => GPoint.new(9,2)), 
                                      "icon_blank")    

    # numbered markers
    1.upto(50) do |i|
      @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDRedIcons/marker#{i}.png",
                                        :icon_size => GSize.new(20,34),
                                        :icon_anchor => GPoint.new(12,34),
                                        :shadow => "/images/icons/google/shadow50.png",
                                        :shadow_size => GSize.new(37,34),
                                        :info_window_anchor => GPoint.new(9,2)), 
                                        "icon_red#{i}")    
    end

    1.upto(50) do |i|
      @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDGreenIcons/marker#{i}.png",
                                        :icon_size => GSize.new(20,34),
                                        :icon_anchor => GPoint.new(12,34),
                                        :shadow => "/images/icons/google/shadow50.png",
                                        :shadow_size => GSize.new(37,34),
                                        :info_window_anchor => GPoint.new(9,2)), 
                                        "icon_green#{i}")    
    end

    1.upto(50) do |i|
      @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDYellowIcons/marker#{i}.png",
                                        :icon_size => GSize.new(20,34),
                                        :icon_anchor => GPoint.new(12,34),
                                        :shadow => "/images/icons/google/shadow50.png",
                                        :shadow_size => GSize.new(37,34),
                                        :info_window_anchor => GPoint.new(9,2)), 
                                        "icon_yellow#{i}")    
    end

    1.upto(50) do |i|
      @map.icon_global_init(GIcon.new(:image => "/images/icons/markers/largeTDBlueIcons/marker#{i}.png",
                                        :icon_size => GSize.new(20,34),
                                        :icon_anchor => GPoint.new(12,34),
                                        :shadow => "/images/icons/google/shadow50.png",
                                        :shadow_size => GSize.new(37,34),
                                        :info_window_anchor => GPoint.new(9,2)), 
                                        "icon_blue#{i}")    
    end

    1.upto(50) do |i|
      @map.icon_global_init(GIcon.new(:image => "/images/icons/0-99/marker#{i}.png", 
                                        :icon_anchor => GPoint.new(12,34),
                                        :shadow => "/images/icons/google/shadow50.png",
                                        :shadow_size => GSize.new(37,34),
                                        :info_window_anchor => GPoint.new(9,2)), 
                                        "icon#{i}")    
    end
  end

  def district_top10
    sql=%Q(
      select *
      from api_growths
      where school_type = '#{@stype}'
      and year='#{current_year}'
      and county_name='#{@county_name}'
      and district_name = '#{@district_name}'
#      and district_rank <= 10
      order by district_rank
    ) #'
    @cds2school={}
    schools=ApiGrowth.find_by_sql(sql)
    for school in schools
      cds= "%02d%05d%07d" % [school.county_code, school.district_code, school.school_code]
      @cds2school[cds] = school
    end
  end

  def county_top10
    # api scores and ranks
    sql=%Q(
      select * 
      from api_growths
      where school_type='#{@stype}' 
      and year='#{current_year}'
      and county_name='#{@county_name}'
      and county_rank <= 10
      order by county_rank
    ) #'
    @cds2school={}
    schools=ApiGrowth.find_by_sql(sql)
    for school in schools
      cds= "%02d%05d%07d" % [school.county_code, school.district_code, school.school_code]
      @cds2school[cds] = school
    end
  end

  def state_top50
    # api scores and ranks
    sql=%Q(
      select * 
      from api_growths
      where school_type='#{@stype}' 
      and year='#{current_year}'
      and state_rank <= 50
      order by state_rank
    ) #'
    @cds2school={}
    schools=ApiGrowth.find_by_sql(sql)
    for school in schools
      cds= "%02d%05d%07d" % [school.county_code, school.district_code, school.school_code]
      @cds2school[cds] = school
    end
  end


##############################################################################################

  def county
    get_parameters
    @map = GMap.new("map_div")
    @map.control_init(:large_map => true, :map_type => true)
    @map.center_zoom_init([37.420644, -121.021325], 6) # center of California
    load_markers
  end

  def refresh_county
    get_parameters

    counties = CnsCounty.find_all_by_county_name(@county_name)    
    
    @county_polygons=[]
    for county in counties 
      polygon = CnsCountyPolygon.find_all_by_polygon_id(county.polygon_id)
      
      latlngs=[]
      for point in polygon
        if point.geotype=='C'
          if @map_center
            @map_center = [(point.lat.to_f+@map_center[0])/2, (point.lng.to_f+@map_center[1])/2] 
          else
            @map_center = [point.lat.to_f, point.lng.to_f]
          end
        elsif point.geotype=='P'
          latlngs << [point.lat.to_f, point.lng.to_f]
        end
      end
      @county_polygons << latlngs
    end
    
    county_refresh_district if @mtype=='district'
    county_refresh_top10 if @mtype=='county'
    county_refresh_top50 if @mtype=='state'
    
  end

  def county_refresh_district
    
    type_str='(1,3,4)' if @stype=='H'
    type_str='(1,2)' if @stype=='M' or @stype=='E'
        
    # for API rank
    districts=ApiSummary.find_all_by_year_and_county_name_and_school_type(current_year, @county_name, @stype)
    @district2api = {}
    for district in districts
      @district2api[district.district_name] = district
    end

    # For geo info
    sql=%Q(
      SELECT *
      FROM ifs_schools 
      WHERE stype in #{type_str}
      and county_name = '#{@county_name}'
      and status = 'OPEN'
      order by district_name;  
    ) #'
    @districts=IfsSchool.find_by_sql(sql)

  end

  def county_refresh_top10
    county_top10
    
    # geo info
    sql=%Q(
      select *
      from ifs_schools
      where stype = '#{@stype}'
      and county_name = '#{@county_name}'
      and status = 'OPEN'
      order by school_name
    ) #'
    @schools=IfsSchool.find_by_sql(sql)
  end 
  
  def county_refresh_top50
    state_top50
    
    # geo info
    sql=%Q(
      select *
      from ifs_schools
      where stype = '#{@stype}'
      and county_name = '#{@county_name}'
      and status = 'OPEN'
      order by school_name
    ) #'
    @schools=IfsSchool.find_by_sql(sql)
  end
  
##############################################################################################################  
  #
  # stype (my wild guess):
  #     E: Elementary + Midddle
  #     S: High school 
  #     U: All schools
  #
  def district
    get_parameters
    @map = GMap.new("map_div")
    @map.control_init(:large_map => true, :map_type => true)
    @map.center_zoom_init([37.420644, -121.021325], 6) # center of California
    load_markers

    refresh_district
  end
  
  
  def refresh_district
    
    get_parameters

    districts=IfsSchool.find(:all, :conditions => {:county_name => @county_name, :stype => @stype}, :order => 'district_name');
    @district_name_array=[]
    for district in districts
      district_name = "#{district.district_name[0..20]}..." if district.district_name.size > 20
      district_name = district.district_name if district.district_name.size <= 20
      @district_name_array << [district_name, district.district_name]
    end

    @district_name = @district_name_array[0][1] if @stype_changed  # first distrct

    #
    # county polygons
    #
    counties = CnsCounty.find_all_by_county_name(@county_name)    
    
    @county_polygons=[]
    for county in counties 
      polygon = CnsCountyPolygon.find_all_by_polygon_id(county.polygon_id)
      
      latlngs=[]
      for point in polygon
        latlngs << [point.lat.to_f, point.lng.to_f] if point.geotype=='P'
      end
      @county_polygons << latlngs
    end
  
    #
    # district polygons
    #
    district_types = "('S', 'U')" if @stype=='H'
    district_types = "('E', 'U')" if @stype=='E' or @stype=='M'

    # NOTE: the length of district_name in cns_schools is 30 (even it's varchar(64))
    @district_name = @district_name[0..29]
    district_name = "('#{@district_name}')" if @stype=='H'
    district_name = "('#{@district_name}', '#{@district_name} Elementary')" if @stype=='E' or @stype=='M'
    
    sql=%Q(
      # find polygons
      select *
      from cns_schools
      where state_code = 'CA'
      and district_type in #{district_types}
      and district_name in #{district_name}
    ) #'
    district=CnsSchool.find_by_sql(sql)

    @district_polygons=[]
    if district.size > 0
      polygon=CnsSchoolPolygon.find_all_by_polygon_id_and_district_type(district[0].polygon_id, district[0].district_type)

      latlngs=[]
      for point in polygon
        if point.geotype=='C'
          if @map_center
            @map_center = [(point.lat.to_f+@map_center[0])/2, (point.lng.to_f+@map_center[1])/2] 
          else
            @map_center = [point.lat.to_f, point.lng.to_f]
          end
        elsif point.geotype=='P'
          latlngs << [point.lat.to_f, point.lng.to_f] 
        end
      end
      # for 'refresh'
      @district_polygons << latlngs
    end

    district_refresh_school if @mtype=='school'
    district_refresh_top10 if @mtype=='county'
    district_refresh_top50 if @mtype=='state'
  end
  
  def district_refresh_school
    district_top10
    
    # For geo info
    sql=%Q(
      SELECT *
      FROM ifs_schools 
      WHERE stype = '#{@stype}'
      and district_name = '#{@district_name}'
      and status = 'OPEN'
      order by school_name  
    ) #'
    @schools=IfsSchool.find_by_sql(sql)
  end

  def district_refresh_top10
    county_top10
    
    # geo info
    sql=%Q(
      select *
      from ifs_schools
      where stype = '#{@stype}'
      and county_name = '#{@county_name}'
      and district_name = '#{@district_name}'
      and status = 'OPEN'
      order by school_name
    ) #'
    @schools=IfsSchool.find_by_sql(sql)
  end
  
  def district_refresh_top50
    state_top50
  end
  
end

  
=begin

    ifs=IfsSchool.find_by_cds(@cds)
    @title=ifs.district_name
    @tagline="#{ifs.county_name} County"
    #
    # District
    #
    district_types="('S', 'U')" if @stype=='H'
    district_types="('E', 'U')" if @stype=='E' or @stype=='M'

    district_name="('#{ifs.district_name}')" if @stype=='H'
    district_name="('#{ifs.district_name}', '#{ifs.district_name} Elementary')" if @stype=='E' or @stype=='M'
    
    sql=%Q(
      # find polygons
      select *
      from cns_schools
      where state_code = 'CA'
      and district_type in #{district_types}
      and district_name in #{district_name}
    ) #'
    district=CnsSchool.find_by_sql(sql)
    
    @polygons=[]
    if district.size > 0
      polygon=CnsSchoolPolygon.find_all_by_polygon_id_and_district_type(district[0].polygon_id, district[0].district_type)

      points=[]
      for point in polygon
        @map.center_zoom_init([point.lat.to_f, point.lng.to_f], 13) if point.geotype=='C'
        points << [point.lat.to_f, point.lng.to_f] if point.geotype=='P'
      end

      polygon=GPolygon.new(points, "#ff0000", 3, 0.5, "#00ff00", 0.1)
      @map.overlay_init(polygon)

      # for 'refresh'
      @polygons << points
    end

    #
    # API information (table generated from STAR)
    #
    county_code = @cds[0,2]
    district_code = @cds[2,5]
    school_code = @cds[7,7]
    schools = ApiGrowth.find_all_by_year_and_district_code_and_school_type(current_year, district_code, @stype)
    school2api = {}
    for school in schools
      school2api[school.school_name] = school
#      puts "(api_growths): #{school.school_name}: #{school.api_score}"
    end

    # 
    # School
    #
    markers=[]
    sql=%Q(
      select * 
      from ifs_schools
      where district_name = '#{ifs.district_name}'
      and stype='#{@stype}'
      and status = 'OPEN'
    ) #'
    schools=IfsSchool.find_by_sql(sql)

    for school in schools
      next if school.lng=='null' or school.lat=='null' or school.school_name == ''
      # puts "#{school.id}: #{school.school_name}: #{school.lng}, #{school.lat}"  

      markers << GMarker.new([school.lat, school.lng], :info_window=>school.school_name ,:title =>school.school_name) 
      
      if school2api[school.school_name]
        school_name="<a href='http://www.ifansee.com/school/api_score?year=#{current_year}&school_type=#{@stype}&school_code=#{school2api[school.school_name].school_code}&district_code=#{school2api[school.school_name].district_code}&county_code=#{school2api[school.school_name].county_code}>#{school.school_name}</a><br />"
        address="#{school.address}<br /> #{school.city}<br /> #{school.state} #{school.zip}<br /><br />"
        state_rank="State Rank: #{school2api[school.school_name].state_rank}<br />"
        county_rank="County Rank: #{school2api[school.school_name].county_rank}<br />"
        district_rank="District Rank:#{school2api[school.school_name].district_rank}<br />"
        api_score="API Score: #{school2api[school.school_name].api_score}<br />"
      else
#        puts "#{school.school_name} not found from hash table!!"
        school_name = school.school_name
        address="#{school.address}<br /> #{school.city}<br /> #{school.state} #{school.zip}<br /><br />"
        state_rank=""
        county_rank=""
        district_rank=""
        api_score=""
      end
      
      @map.overlay_init(GMarker.new([school.lat, school.lng],
                                      :title => school.school_name, 
                                      :info_window => "#{school_name} #{api_score} #{state_rank} #{county_rank} #{district_rank} <br />"))
    end
    

=end
