class CnsController < ApplicationController

  def initialize
    @app_name='CNS'
    @title='iFS Google Map'
    @tagline='iFanSee.com'
    @theme='aqualicious'

    @map = GMap.new("map_div")
    @map.control_init(:large_map => true, :map_type => true)
  end

  def get_parameters
    @html_type = params[:html_type]
    @county_name = params[:county_name]
    @district_name=params[:district_name]
    @stype = params[:stype]
    @cds=params[:cds]
  end

  def refresh
    refresh_county 
    refresh_district 
  end

  def county
    get_parameters
    
    @map.center_zoom_init([37.420644, -121.021325], 6)
#    @map.overlay_init GMarker.new([37.350408, -122.056942],:title => "Marker-1", :info_window => "Marker 1!")
#    @map.record_init @map.add_overlay(GMarker.new([37.344858, -122.02655],:title => "Marker-2", :info_window => "Marker 2!"))
  end

  def refresh_county
    get_parameters
    counties = CnsCounty.find_all_by_county_name(@county_name)    
    
    @polygons=[]
    for county in counties 
      polygon = CnsCountyPolygon.find_all_by_polygon_id(county.polygon_id)
      polygon_point=[]
      for point in polygon
        #puts "#{point.geotype}: #{point.lat.to_f} - #{point.lng.to_f}" if point.geotype=='C'
        #puts "#{point.geotype}: #{point.lat.to_f} - #{point.lng.to_f}" if point.geotype=='P'
  
        if point.geotype=='C'
          if @map_center
            @map_center = [(point.lat.to_f+@map_center[0])/2, (point.lng.to_f+@map_center[1])/2] 
          else
            @map_center = [point.lat.to_f, point.lng.to_f]
          end
        elsif point.geotype=='P'
          polygon_point << [point.lat.to_f, point.lng.to_f]
        end
      end
      @polygons << polygon_point
    end
    
  end


  def refresh_district
    
    type_str='(1,3,4)' if @stype=='H'
    type_str='(1,2)' if @stype=='M' or @stype=='E'
        
    #
    # API information (table generated from STAR)
    #
    sql=%Q(
      SELECT stype, cds, district_name, lat, lng 
      FROM ifs_schools 
      WHERE stype in #{type_str}
      and county_name = '#{@county_name}'
      order by district_name;  
    ) #'
    districts=IfsSchool.find_by_sql(sql)
    @markers=[]
    for district in districts
      @markers << GMarker.new([district.lat.to_f, district.lng.to_f], 
                                :info_window => 
                                  "District: <a href='/cns/district?stype=#{@stype}&cds=#{district.cds}'>#{district.district_name}</a><br />" + 
                                  "Avg. API Score: 1234 <br />" + 
                                  "Ranks:(x/y/z) <br />",
                                :title => district.district_name)
    end
#    @clusterer = Clusterer.new(@markers, :max_visible_markers=>1)  
    
  end
  
  
  #
  # stype (my wild guess):
  #     E: Elementary + Midddle
  #     S: High school 
  #     U: All schools
  #
  def district
    get_parameters

    @map = GMap.new("map_div")
    @map.control_init(:large_map => true, :map_type => true)
        
    ifs=IfsSchool.find_by_cds(@cds)
    @title=ifs.district_name
    @tagline="#{ifs.county_name} County"
    #
    # District
    #
    district_types="('S', 'U')" if @stype=='H'
    district_types="('E', 'U')" if @stype=='E' or @stype=='M'

    district_name="('#{ifs.district_name}')" if @stype=='H'
    district_name="('#{ifs.district_name}', '#{ifs.district_name} Elementary')" if @stype=='E' or @stype=='M'
    
    points=[]
    sql=%Q(
      select *
      from cns_schools
      where state_code = 'CA'
      and district_type in #{district_types}
      and district_name in #{district_name}
    ) 
    district=CnsSchool.find_by_sql(sql)
    if district.size > 0
      polygon=CnsSchoolPolygon.find_all_by_polygon_id_and_district_type(district[0].polygon_id, district[0].district_type)
      for point in polygon
        @map.center_zoom_init([point.lat.to_f, point.lng.to_f], 13) if point.geotype=='C'
        points << [point.lat.to_f, point.lng.to_f] if point.geotype=='P'
      end
      polygon=GPolygon.new(points, "#ff0000", 3, 0.5, "#00ff00", 0.1)
      @map.overlay_init(polygon)
    end

    #
    # API information (table generated from STAR)
    #
    county_code = @cds[0,2]
    district_code = @cds[2,5]
    school_code = @cds[7,7]
    schools = ApiGrowth.find_all_by_year_and_district_code_and_school_type(current_year, district_code, @stype)
    school2api = {}
    for school in schools
      school2api[school.school_name] = school
    end

    # 
    # School
    #
    markers=[]
    sql=%Q(
      select * 
      from ifs_schools
      where district_name = '#{ifs.district_name}'
      and stype='#{@stype}'
      and status = 'OPEN'
    ) 
    schools=IfsSchool.find_by_sql(sql)
    for school in schools
      next if school.lng=='null' or school.lat=='null' or school.school_name == ''
      # puts "#{school.id}: #{school.school_name}: #{school.lng}, #{school.lat}"  
      
      markers << GMarker.new([school.lat, school.lng], :info_window=>school.school_name ,:title =>school.school_name) 
      school_name="<a href='http://www.ifansee.com/school/api_score?year=#{current_year}&school_type=#{@stype}&school_code=#{school2api[school.school_name].school_code}&district_code=#{school2api[school.school_name].district_code}&county_code=#{school2api[school.school_name].county_code}>#{school.school_name}</a><br />"
      address="#{school.address}<br /> #{school.city}<br /> #{school.state} #{school.zip}<br /><br />"
      state_rank="State Rank: #{school2api[school.school_name].state_rank}<br />"
      county_rank="County Rank: #{school2api[school.school_name].county_rank}<br />"
      district_rank="District Rank:#{school2api[school.school_name].district_rank}<br />"
      api_score="API Score: #{school2api[school.school_name].api_score}<br />"
      @map.overlay_init(GMarker.new([school.lat, school.lng],
                                      :title => school.school_name, 
                                      :info_window => "#{school_name} #{api_score} #{state_rank} #{county_rank} #{district_rank} <br />"))
    end
    
  end
  
  
  
end




